name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev,databricks,monitoring]"
    
    - name: Lint with flake8
      run: |
        flake8 services/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: mypy services/
    
    - name: Format check with black
      run: black --check services/ tests/
    
    - name: Import sort check with isort
      run: isort --check-only services/ tests/
    
    - name: Security check with bandit
      run: bandit -r services/ -f json -o bandit-report.json
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        ENCRYPTION_KEY: test-encryption-key-32-bytes-long
      run: |
        pytest tests/ -v --cov=services --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: services/ui/package-lock.json
    
    - name: Install dependencies
      working-directory: services/ui
      run: npm ci
    
    - name: Lint
      working-directory: services/ui
      run: npm run lint
    
    - name: Type check
      working-directory: services/ui
      run: npm run type-check
    
    - name: Test
      working-directory: services/ui
      run: npm run test -- --coverage --watchAll=false
    
    - name: Build
      working-directory: services/ui
      run: npm run build

  test-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Terraform Format Check
      working-directory: infrastructure/terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: terraform init -backend=false
    
    - name: Terraform Validate
      working-directory: infrastructure/terraform
      run: terraform validate
    
    - name: Terraform Plan (Dry Run)
      working-directory: infrastructure/terraform
      run: |
        cp terraform.tfvars.example terraform.tfvars
        terraform plan -var="db_password=dummy" -var="databricks_token=dummy"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Pipeline Service
      uses: docker/build-push-action@v5
      with:
        context: services/pipeline-service
        push: false
        tags: pipeline-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Catalog Service
      uses: docker/build-push-action@v5
      with:
        context: services/catalog-service
        push: false
        tags: catalog-service:${{ github.sha }}
    
    - name: Build Connector Service
      uses: docker/build-push-action@v5
      with:
        context: services/connector-service
        push: false
        tags: connector-service:${{ github.sha }}
    
    - name: Build Data Quality Service
      uses: docker/build-push-action@v5
      with:
        context: services/data-quality-service
        push: false
        tags: data-quality-service:${{ github.sha }}
    
    - name: Build UI
      uses: docker/build-push-action@v5
      with:
        context: services/ui
        push: false
        tags: ui:${{ github.sha }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
    
    - name: Start services with Docker Compose
      run: docker-compose up -d
    
    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'
    
    - name: Run integration tests
      env:
        API_BASE_URL: http://localhost:8080
      run: pytest tests/integration/ -v
    
    - name: Stop services
      if: always()
      run: docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

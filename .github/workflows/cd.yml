name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Pipeline Service
      uses: docker/build-push-action@v5
      with:
        context: services/pipeline-service
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/multi-tenant-pipeline-service:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/multi-tenant-pipeline-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Catalog Service
      uses: docker/build-push-action@v5
      with:
        context: services/catalog-service
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/multi-tenant-catalog-service:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/multi-tenant-catalog-service:latest
    
    - name: Build and push Connector Service
      uses: docker/build-push-action@v5
      with:
        context: services/connector-service
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/multi-tenant-connector-service:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/multi-tenant-connector-service:latest
    
    - name: Build and push Data Quality Service
      uses: docker/build-push-action@v5
      with:
        context: services/data-quality-service
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/multi-tenant-data-quality-service:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/multi-tenant-data-quality-service:latest
    
    - name: Build and push UI
      uses: docker/build-push-action@v5
      with:
        context: services/ui
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/multi-tenant-ui:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/multi-tenant-ui:latest
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: infrastructure/terraform
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="databricks_token=${{ secrets.DATABRICKS_TOKEN }}" \
          -out=tfplan
    
    - name: Terraform Apply
      working-directory: infrastructure/terraform
      if: github.ref == 'refs/heads/main'
      run: terraform apply tfplan
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster multi-tenant-ingestion-cluster \
          --service pipeline-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        aws ecs update-service \
          --cluster multi-tenant-ingestion-cluster \
          --service catalog-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        aws ecs update-service \
          --cluster multi-tenant-ingestion-cluster \
          --service connector-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        aws ecs update-service \
          --cluster multi-tenant-ingestion-cluster \
          --service data-quality-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster multi-tenant-ingestion-cluster \
          --services pipeline-service catalog-service connector-service data-quality-service \
          --region ${{ env.AWS_REGION }}
    
    - name: Run post-deployment tests
      run: |
        # Wait for services to be healthy
        sleep 60
        
        # Get load balancer URL from Terraform outputs
        LB_URL=$(terraform output -raw load_balancer_dns)
        
        # Test health endpoints
        curl -f http://$LB_URL/health || exit 1
        curl -f http://$LB_URL/api/v1/pipelines/health || exit 1
        
        echo "Deployment successful!"
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Deployment to ${{ github.event.inputs.environment || 'staging' }} ${{ job.status }}!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

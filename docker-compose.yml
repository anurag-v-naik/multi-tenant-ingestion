# Multi-Tenant Data Ingestion Framework
# Local Development Environment with Docker Compose

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: multi-tenant-postgres
    environment:
      POSTGRES_DB: multi_tenant_ingestion
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - multi-tenant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: multi-tenant-redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - multi-tenant-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Pipeline Service
  pipeline-service:
    build:
      context: ./services/pipeline-service
      dockerfile: Dockerfile
    container_name: pipeline-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://:redis123@redis:6379/0
      - JWT_SECRET_KEY=dev-jwt-secret-key
      - DATABRICKS_TOKEN_FINANCE=dapi-finance-token
      - DATABRICKS_TOKEN_RETAIL=dapi-retail-token
      - DATABRICKS_TOKEN_HEALTHCARE=dapi-healthcare-token
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - multi-tenant-network
    volumes:
      - ./services/pipeline-service:/app
    command: ["python", "app/main.py"]
    restart: unless-stopped

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: catalog-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multi_tenant_ingestion
      - JWT_SECRET_KEY=dev-jwt-secret-key
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_ENDPOINT_URL=http://minio:9000
      - DATABRICKS_TOKEN_FINANCE=dapi-finance-token
      - DATABRICKS_TOKEN_RETAIL=dapi-retail-token
      - DATABRICKS_TOKEN_HEALTHCARE=dapi-healthcare-token
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - multi-tenant-network
    volumes:
      - ./services/catalog-service:/app
    command: ["python", "app/main.py"]
    restart: unless-stopped

  # Connector Service
  connector-service:
    build:
      context: ./services/connector-service
      dockerfile: Dockerfile
    container_name: connector-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multi_tenant_ingestion
      - JWT_SECRET_KEY=dev-jwt-secret-key
      - ENCRYPTION_KEY=dev-encryption-key-32-chars-long
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - multi-tenant-network
    volumes:
      - ./services/connector-service:/app
    command: ["python", "app/main.py"]
    restart: unless-stopped

  # Data Quality Service
  data-quality-service:
    build:
      context: ./services/data-quality-service
      dockerfile: Dockerfile
    container_name: data-quality-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://:redis123@redis:6379/0
      - JWT_SECRET_KEY=dev-jwt-secret-key
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - multi-tenant-network
    volumes:
      - ./services/data-quality-service:/app
    command: ["python", "app/main.py"]
    restart: unless-stopped

  # React UI
  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    container_name: multi-tenant-ui
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - multi-tenant-network
    volumes:
      - ./services/ui:/app
      - /app/node_modules
    command: ["npm", "start"]
    restart: unless-stopped

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8080:80"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - pipeline-service
      - catalog-service
      - connector-service
      - data-quality-service
    networks:
      - multi-tenant-network
    restart: unless-stopped

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: multi-tenant-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - multi-tenant-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO buckets
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - multi-tenant-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/iceberg-finance --ignore-existing;
      /usr/bin/mc mb minio/iceberg-retail --ignore-existing;
      /usr/bin/mc mb minio/iceberg-healthcare --ignore-existing;
      /usr/bin/mc policy set public minio/iceberg-finance;
      /usr/bin/mc policy set public minio/iceberg-retail;
      /usr/bin/mc policy set public minio/iceberg-healthcare;
      exit 0;
      "

  # Prometheus (Metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: multi-tenant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - multi-tenant-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana (Metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: multi-tenant-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - multi-tenant-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger (Distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: multi-tenant-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "14268:14268"
      - "16686:16686"
    networks:
      - multi-tenant-network
    restart: unless-stopped

  # ElasticSearch (Logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: multi-tenant-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - multi-tenant-network
    restart: unless-stopped

  # Kibana (Log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: multi-tenant-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - multi-tenant-network
    restart: unless-stopped

  # Logstash (Log processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: multi-tenant-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - multi-tenant-network
    restart: unless-stopped

  # Development Tools Container
  dev-tools:
    image: python:3.11-slim
    container_name: dev-tools
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    networks:
      - multi-tenant-network
    command: tail -f /dev/null
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  multi-tenant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: multi_tenant_ingestion
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app_network

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
    depends_on:
      - postgres
      - redis
    networks:
      - app_network
    restart: unless-stopped

  # Connector Service
  connector-service:
    build:
      context: ./services/connector-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - AUTH_SERVICE_URL=http://auth-service:8001
    depends_on:
      - postgres
      - auth-service
    networks:
      - app_network
    restart: unless-stopped

  # Pipeline Service
  pipeline-service:
    build:
      context: ./services/pipeline-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CONNECTOR_SERVICE_URL=http://connector-service:8002
      - DATABRICKS_WORKSPACE_URL=${DATABRICKS_WORKSPACE_URL}
      - DATABRICKS_TOKEN=${DATABRICKS_TOKEN}
    depends_on:
      - postgres
      - auth-service
      - connector-service
    networks:
      - app_network
    restart: unless-stopped

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - AUTH_SERVICE_URL=http://auth-service:8001
    depends_on:
      - postgres
      - auth-service
    networks:
      - app_network
    restart: unless-stopped

  # Data Quality Service
  data-quality-service:
    build:
      context: ./services/data-quality-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - AUTH_SERVICE_URL=http://auth-service:8001
    depends_on:
      - postgres
      - auth-service
    networks:
      - app_network
    restart: unless-stopped

  # React UI
  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080/api
    depends_on:
      - nginx
    networks:
      - app_network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - connector-service
      - pipeline-service
      - catalog-service
      - data-quality-service
    networks:
      - app_network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge

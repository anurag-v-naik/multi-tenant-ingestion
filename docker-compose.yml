version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: multi-tenant-postgres
    environment:
      POSTGRES_DB: multi_tenant_ingestion
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: multi-tenant-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pipeline Service
  pipeline-service:
    build:
      context: ./services/pipeline-service
      dockerfile: Dockerfile
    container_name: pipeline-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/pipeline-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: catalog-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/catalog-service:/app

  # Connector Service
  connector-service:
    build:
      context: ./services/connector-service
      dockerfile: Dockerfile
    container_name: connector-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8003:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/connector-service:/app

  # Data Quality Service
  data-quality-service:
    build:
      context: ./services/data-quality-service
      dockerfile: Dockerfile
    container_name: data-quality-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/multi_tenant_ingestion
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8004:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/data-quality-service:/app

  # Web UI
  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    container_name: multi-tenant-ui
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./services/ui:/app
      - /app/node_modules

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8080:80"
    volumes:
      - ./deployment/configs/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - pipeline-service
      - catalog-service
      - connector-service
      - data-quality-service

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: multi-tenant-network
